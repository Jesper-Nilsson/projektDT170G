package se.miun.dt170g.projektdt170g.API;

import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.FlushModeType;
import jakarta.persistence.PersistenceContext;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import se.miun.dt170g.projektdt170g.items.ALaCarteItem;
import se.miun.dt170g.projektdt170g.items.Drink;
import se.miun.dt170g.projektdt170g.items.OrderDTO;
import se.miun.dt170g.projektdt170g.models.*;

import java.util.ArrayList;
import java.util.Collection;

/**
 * REST API endpoint class for managing a la carte menu items.
 * Allows retrieval of dinner menu items filtered by their type.
 */
@Path("/order")
@Stateless
public class OrderAPI {
    @PersistenceContext
    private EntityManager entityManager;

    @GET

    @Produces(MediaType.APPLICATION_JSON)
    public OrderDTO getOrder(@QueryParam("orderID") int orderID,
                             @QueryParam("kitchen") boolean kitchen,
                             @QueryParam("service") boolean service) {

        //check orderID if not given, error or just everything today

        OrderDTO order_return = new OrderDTO();
        if (kitchen) {

        } else if (service) {

        }
        RestaurantOrderEntity test = entityManager.find(RestaurantOrderEntity.class,orderID);

        order_return.setOrder_ID(test.getRestaurantOrderId());
        order_return.setStatusAppetizer(test.getStatusAppetizer());
        order_return.setStatusMain(test.getStatusMain());
        order_return.setStatusDessert(test.getStatusDessert());
        order_return.setComment(test.getComment());

        for ( PurchasedALaCarteEntity purchasedALaCarte : test.getPurchasedALaCartesByRestaurantOrderId()){
            ALaCarteMenuEntity food = entityManager.find(ALaCarteMenuEntity.class,purchasedALaCarte.getaLaCarteId());
            order_return.addFood(new ALaCarteItem(food));
        }
        for (PurchasedDrinksEntity purchasedDrinks : test.getPurchasedDrinksByRestaurantOrderId() ){
            DrinksEntity drink = entityManager.find(DrinksEntity.class, purchasedDrinks.getDrinkId());
            order_return.addDrink(new Drink(drink));
        }
        return order_return;
    }

    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Response addOrder(OrderDTO orderDTO) {
        try {
            RestaurantOrderEntity order = new RestaurantOrderEntity(orderDTO);
            entityManager.persist(order);
            entityManager.setFlushMode(FlushModeType.COMMIT);
            entityManager.flush();
            System.out.println(order.getRestaurantOrderId());

            // Now proceed to associate and persist PurchasedALaCarteEntity instances for each food item
            for (ALaCarteItem purchasedALaCarte : orderDTO.getFoods()) {
                ALaCarteMenuEntity food = entityManager.find(ALaCarteMenuEntity.class, purchasedALaCarte.getaLaCarteID());
                if (food != null) { // Ensure the food item exists
                    PurchasedALaCarteEntity connectionToAdd = new PurchasedALaCarteEntity(); // Create a new instance for each item
                    connectionToAdd.setRestaurantOrderByOrderId(order);
                    connectionToAdd.setaLaCarteMenuByALaCarteId(food);

                    // Link both sides of the relationship
                   order.addPurchasedALaCarte(connectionToAdd);

                    entityManager.persist(connectionToAdd); // Persist each new PurchasedALaCarteEntity
                }
            }

            // Optionally, if there are cascading persist operations set up for the collection in RestaurantOrderEntity,
            // persisting the order again is not necessary. If not, ensure the relationship management is correctly configured.

            return Response.ok().build();
        } catch (Exception e) {
            // Log the exception to server logs, if logging is configured
            e.printStackTrace(); // Consider using a logger in a real application

            // Return a server error response with the exception message
            return Response
                    .status(Response.Status.INTERNAL_SERVER_ERROR)
                    .entity("An error occurred while processing the order: " + e.getMessage())
                    .build();
        }
    }





}
